/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TalentRankVoting {
  export type CandidateStruct = {
    id: BigNumberish;
    name: string;
    description: string;
    imageURI: string;
    voteCount: BytesLike;
  };

  export type CandidateStructOutput = [
    id: bigint,
    name: string,
    description: string,
    imageURI: string,
    voteCount: string
  ] & {
    id: bigint;
    name: string;
    description: string;
    imageURI: string;
    voteCount: string;
  };
}

export interface TalentRankVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeViewer"
      | "endTime"
      | "endVoting"
      | "getAllCandidates"
      | "getCandidate"
      | "getCandidateCount"
      | "getMyVoteEncrypted"
      | "getTotalVotes"
      | "grantDecryptionTo"
      | "hasVoted"
      | "owner"
      | "protocolId"
      | "registerCandidate"
      | "renounceOwnership"
      | "setVotingWindow"
      | "startTime"
      | "transferOwnership"
      | "vote"
      | "votingEnded"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateRegistered"
      | "DecryptGranted"
      | "OwnershipTransferred"
      | "Voted"
      | "VotingEnded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeViewer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyVoteEncrypted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantDecryptionTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerCandidate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingWindow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "votingEnded",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeViewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyVoteEncrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantDecryptionTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEnded",
    data: BytesLike
  ): Result;
}

export namespace CandidateRegisteredEvent {
  export type InputTuple = [id: BigNumberish, name: string];
  export type OutputTuple = [id: bigint, name: string];
  export interface OutputObject {
    id: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptGrantedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
  export type OutputTuple = [voter: string, candidateId: bigint];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEndedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TalentRankVoting extends BaseContract {
  connect(runner?: ContractRunner | null): TalentRankVoting;
  waitForDeployment(): Promise<this>;

  interface: TalentRankVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeViewer: TypedContractMethod<[], [void], "nonpayable">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  endVoting: TypedContractMethod<[], [void], "nonpayable">;

  getAllCandidates: TypedContractMethod<
    [],
    [TalentRankVoting.CandidateStructOutput[]],
    "view"
  >;

  getCandidate: TypedContractMethod<
    [id: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        candidateId: bigint;
        name: string;
        description: string;
        imageURI: string;
        voteCount: string;
      }
    ],
    "view"
  >;

  getCandidateCount: TypedContractMethod<[id: BigNumberish], [string], "view">;

  getMyVoteEncrypted: TypedContractMethod<[], [string], "view">;

  getTotalVotes: TypedContractMethod<[], [string], "view">;

  grantDecryptionTo: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  hasVoted: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerCandidate: TypedContractMethod<
    [name: string, imageURI: string, description: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVotingWindow: TypedContractMethod<
    [startTimestamp: BigNumberish, endTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<[candidateId: BigNumberish], [void], "nonpayable">;

  votingEnded: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeViewer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllCandidates"
  ): TypedContractMethod<
    [],
    [TalentRankVoting.CandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        candidateId: bigint;
        name: string;
        description: string;
        imageURI: string;
        voteCount: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidateCount"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMyVoteEncrypted"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalVotes"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantDecryptionTo"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerCandidate"
  ): TypedContractMethod<
    [name: string, imageURI: string, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingWindow"
  ): TypedContractMethod<
    [startTimestamp: BigNumberish, endTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[candidateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votingEnded"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CandidateRegistered"
  ): TypedContractEvent<
    CandidateRegisteredEvent.InputTuple,
    CandidateRegisteredEvent.OutputTuple,
    CandidateRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DecryptGranted"
  ): TypedContractEvent<
    DecryptGrantedEvent.InputTuple,
    DecryptGrantedEvent.OutputTuple,
    DecryptGrantedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnded"
  ): TypedContractEvent<
    VotingEndedEvent.InputTuple,
    VotingEndedEvent.OutputTuple,
    VotingEndedEvent.OutputObject
  >;

  filters: {
    "CandidateRegistered(uint256,string)": TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
    CandidateRegistered: TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;

    "DecryptGranted(address)": TypedContractEvent<
      DecryptGrantedEvent.InputTuple,
      DecryptGrantedEvent.OutputTuple,
      DecryptGrantedEvent.OutputObject
    >;
    DecryptGranted: TypedContractEvent<
      DecryptGrantedEvent.InputTuple,
      DecryptGrantedEvent.OutputTuple,
      DecryptGrantedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotingEnded(uint256)": TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
    VotingEnded: TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
  };
}
